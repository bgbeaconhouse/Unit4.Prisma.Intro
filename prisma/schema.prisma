// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String?
  role       Role      @default(CUSTOMER)
  products   Product[]
  pickUps    PickUp[]
  deliveries Delivery[]
  carts      Cart[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  pickUps     PickUp[]
  carts       Cart[]    @relation("CartToProduct")
  guestCarts  GuestCart[] @relation("GuestCartToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PickUp {
  id         Int      @id @default(autoincrement())
  notes      String
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pickUpDate DateTime
}

model Delivery {
  id           Int      @id @default(autoincrement())
  address      String
  notes        String?
  deliveryDate DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[] @relation("CartToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model GuestCart {
  id         Int       @id @default(autoincrement())
  identifier String    @unique 
  products   Product[] @relation("GuestCartToProduct")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}